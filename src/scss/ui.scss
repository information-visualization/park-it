/**
  Styles for the shiny UI
 */

$border-radius: 6px;
$font-primary: "brandon-grotesque", "Helvetica", "Arial", sans-serif;
$font-serif: "PT Serif", serif;
$font-size: 16px;
$box-shadow: 0px 3px 7px 0px rgba(0, 0, 0, 0.12);

$colors: (
  "background": #FFFFFF,
  "lightgray": #E9E9EA,
  "gray": #A8A8B5,
  "darkgray": #949598,
  "foreground": #52525F,
  "accent": #3465E5,
  "highlight": #61D095
);

// Responsive mixin
@mixin responsive($min-screen-width) {
  @media screen and (min-width: #{$min-screen-width}) {
    @content;
  }
}

// Responsive breakpoint for tablet
@mixin responsive-tablet() {
  @include responsive(768px) {
    @content;
  }
}

// Responsive breakpoint for wide tablet
@mixin responsive-tablet-wide() {
  @include responsive(992px) {
    @content;
  }
}

// Frosted panel effects
@mixin frosted-panel {
  background-color: map.get($colors, "background-frost");
  backdrop-filter: saturate(180%) blur(20px);
  -webkit-backdrop-filter: saturate(180%) blur(20px);
  border-radius: calc($border-radius + 4px);
  border: 0;
  box-shadow: none;
}

// Responsive breakpoint for desktop
@mixin responsive-desktop() {
  @include responsive(1200px) {
    @content;
  }
}

// Common styles to floating panel elements
@mixin panel-common() {
  display: block;
  position: fixed;
  z-index: 20;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  transition: all 0.3s ease;
  width: 100%;
  max-width: 390px; // iPhone viewport width
  padding: 20px 40px;
  background: map.get($colors, "background");
  border-radius: $border-radius;
  margin: 0;
}


// Common styles to row wrappers
@mixin row-common() {
  display: flex;
  flex-flow: row nowrap;
  justify-content: space-between;
  align-items: center;
  align-content: center;
  width: 100%;
  margin: 0;
  gap: 10px;
  
  &.v-gap {
    margin: 36px 0;
  }
  
  &.v-collapse-bottom {
    margin-bottom: 0;
  }
  
  &::before {
    display: none;
  }
  
  &::after {
    display: none;
  }
}

@mixin filter_label() {
  font-size: 14px;
  font-weight: 400;
  color: map.get($colors, "foreground");
  padding: 0;
}

html {
  font-size: $font-size;
  
  body {
    color: map.get($colors, "foreground");
    background-color: map.get($colors, "background");
    font-family: $font-primary;
    font-weight: 400;
  }
}

div.spacer {
  display: block;
  width: 100%;
  height: 16px;
  
  &.h32 {
    height: 32px;
  }
  
  &.h48 {
    height: 48px;
  }
  
  &.h64 {
    height: 64px;
  }
}

.form-control {
  box-shadow: none;
  
  &:focus {
    outline: 0;
    border: 0;
    box-shadow: none;
  }
}

// Hide the display bar
.navbar {
  display: none;
}

// Shiny containers
.container {
  .tab-pane {
    // Map pane
    &[data-value="Map"] {
      display: block;
      position: fixed;
      width: 100vw;
      height: 100vh;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      
      div.leaflet-marker-icon {
        background: url("marker.svg");
        background-size: contain;
        
        div {
          background: transparent;
          
          span {
            color: #FFFFFF;
            position: absolute;
            top: 0;
            left: 50%;
            transform: translate(-50%, 0)
          }
        }
      }
    }
    
    // Search pane
    &[data-value="Search"] {
      @include panel-common();
      z-index: 10;
      border-radius: 0;
      top: 0;
      transform: translate(-50%, 0);
      
      &.busy {
        .row.search-bar .wrapper .button.search {
          &::after{
            content: "sync";
            animation: spin 1s infinite;
            
            @keyframes spin {
              from {
                transform: translate(-50%, -50%) rotate(0deg);
              }
              
              to {
                transform: translate(-50%, -50%) rotate(360deg);
              }
            }
          }
        }
      }
      
      .row {
        @include row-common();
        
        &.logo {
          justify-content: left;
          margin-bottom: 10px;
          
          img {
            height: auto;
            width: 60px;
            object-fit: cover;
          }
        }
        
        &.search-bar {
          .wrapper {
            --search-height: 36px;
            --btn-width: calc(var(--search-height) * 1.3);
            position: relative;
            width: 100%;
            height: var(--search-height);
            border: map.get($colors, "foreground") 1px solid;
            border-radius: var(--search-height);
            padding: 0 var(--btn-width);
            
            &::after {
              content: "search";
              font-family: "Material Icons";
              display: block;
              position: absolute;
              left: calc(var(--btn-width) / 2);
              top: 50%;
              transform: translate(-50%, -50%);
              background: transparent;
              color: map.get($colors, "gray");
              font-size: 1em;
            }
            
            .shiny-input-container {
              margin: 0;
              width: 100%;
              color: map.get($colors, "foreground");
              border: 0;
              
              label {
                display: none;
              }
              
              input {
                border: 0;
                appearance: none;
                padding-left: 0;
                padding-right: 0;
                text-overflow: ellipsis;
              }
            }
            
            & > * {
              height: calc(var(--search-height) - 2px);
            }
            
            .button {
              position: absolute;
              width: var(--btn-width);
              top: 50%;
              right: 0;
              transform: translate(0, -50%);
              background: transparent;
              cursor: pointer;
              transition: all 0.3s ease;
              color: map.get($colors, "gray");
              
              &::after {
                font-family: "Material Icons";
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                font-size: 1em;
                color: inherit;
              }
              
              &.gps {
                right: var(--btn-width);
                width: calc(var(--btn-width) * 0.8);
                background: linear-gradient(
                  90deg,
                  transparent 0%,
                  rgba(map.get($colors, "background"), 1) 30%
                );
                transition: color 0.3s all;
                
                &::after {
                  content: "gps_fixed";
                }
                
                &:hover {
                  color: darken(map.get($colors, "foreground"), 10%)
                }
                
                &.active {
                  color: map.get($colors, "accent");
                }
              }
              
              &.search {
                right: 0;
                border-radius: 0 var(--search-height) var(--search-height) 0;
                background: map.get($colors, "accent");
                
                &::after {
                  content: "arrow_forward";
                  color: #FFFFFF;
                }
                
                &:hover {
                  background: lighten(map.get($colors, "accent"), 10%)
                }
              }
            }
          }
        }
      }
    }
    
    // Filters pane
    &[data-value="SearchResults"] {
      @include frosted-panel();
      display: none;
      position: fixed;
      top: 350px;
      left: 50%;
      transform: translate(-50%, 0);
      background: rgba(map.get($colors, "background"), 0.6);
      box-shadow: $box-shadow;
      max-height: 0;
      transition: all 0.3s ease;
      z-index: 15;
      overflow: hidden;
      padding: 10px 5px;
      
      &.active {
        max-height: 100vh;
        overflow-y: scroll;
        display: flex;
        flex-direction: column;
        gap: 5px;
      }
      
      .result-wrapper {
        @include frosted-panel();
        background: transparent;
        transition: all 0.3s ease;
        cursor: pointer;
        padding: 5px;
        
        & > * {
          overflow: hidden;
          white-space: nowrap;
          text-overflow: ellipsis;
          transition: color 0.3s ease;
          font-size: 0.9em;
        }
        
        &:hover {
          background: rgba(map.get($colors, "accent"), 0.9);
          color: #FFFFFF;
          
          .result-loc {
            color: map.get($colors, "lightgray");
          }
        }
        
        .result-loc {
          color: map.get($colors, "gray");
        }
      }
      
      .result-none {
        background: transparent;
        width: 100%;
        height: 28px;
        line-height: 28px;
        color: map.get($colors, "gray");
        text-align: center;
      }
    }
    
    // Filters pane
    &[data-value="Filters"] {
      @include panel-common();
      top: auto;
      bottom: 0;
      transform: translate(-50%, calc(100% - 60px));
      border-radius: 60px 60px 0 0;
      transition: transform 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.175);
      box-shadow: 0px -8px 37px -3px rgba(#2C2424, 0.25);
      
      &.active {
        transform: translate(-50%, 10px);
        
        & #filters-show-hide {
          &::after {
            transform: translate(-50%, -50%) rotate(180deg);
          }
        }
      }
      
      .shiny-input-container {
        margin: 0;
      }
      
      .row {
        @include row-common();
        
        &.w-150 {
          width: 150px;
        }
        
        &.header {
          justify-content: center;
          
          h1 {
            margin: 0;
            font-size: 1.5em;
          }
          
          @at-root #filters-show-hide {
            --btn-size: 24px;
            display: block;
            height: var(--btn-size);
            width: var(--btn-size);
            border-radius: var(--btn-size);
            color: map.get($colors, "foreground");
            background: transparent;
            margin: 0;
            padding: 0;
            position: relative;
            cursor: pointer;
            transition: all 0.3s ease;
            
            &:hover {
              background: map.get($colors, "lightgray");
            }
            
            &::after {
              position: absolute;
              top: 50%;
              left: 50%;
              transform: translate(-50%, -50%) rotate(0);
              background: transparent;
              content: "keyboard_double_arrow_up";
              font-family: "Material Icons";
              color: inherit;
            }
          }
        }
        
        &.control {
          &.input-small {
            .shiny-input-container {
              width: auto;
              position: relative;
              
              input[type="number"] {
                --border-color: #{map.get($colors, "lightgray")};
                width: 50px;
                margin: 0;
                // Disable numeric input decorator on Firefox
                -moz-appearance: textfield;
                
                // Disable numeric input decorator on Safari, Edge, Chrome
                &::-webkit-outer-spin-button,
                &::-webkit-outer-spin-button {
                  -webkit-appearance: none;
                }
                
                color: map.get($colors, "foreground");
                border: var(--border-color) 1px solid;
                text-align: center;
                
                &:hover {
                  --border-color: #{darken(map.get($colors, "lightgray"), 15%)}
                }
                
                &:focus {
                  --border-color: #{map.get($colors, "foreground")}
                }
              }
              
              label {
                position: absolute;
                font-weight: 400;
                margin: 0;
                left: 50%;
                bottom: 0;
                transform: translate(-50%, 90%);
              }
            }
            
            &.cost {
              --gap: 50px;
              gap: var(--gap);
              
              hr.accent-connect {
                border: map.get($colors, "accent") 1px solid;
                border-bottom: none;
                margin: 0 calc(-1 * var(--gap));
                width: 100%;
              }
              
              .shiny-input-container {
                --indicator-gap: 1em;
                &::after {
                  content: "$";
                  display: block;
                  position: absolute;
                  left: var(--indicator-gap);
                  top: 50%;
                  transform: translate(-50%, -50%);
                }
                
                input[type="number"] {
                  text-align: right;
                }
              }
            }
          }

          .shiny-input-container {
            width: 100%;
          }
          
          .checkbox {
              --toggle-height: 24px;
              --toggle-width: calc(var(--toggle-height) * 1.5);
              position: relative;
              
              label {
                padding-left: 0;
              }
              
              input[type=checkbox] {
                appearance: none;
                display: none;
                
                &:checked {
                  // Toggle label
                  ~ span {
                    // Toggle track
                    &::before {
                      background: map.get($colors, "accent");
                    }
                    
                    // Toggle knob
                    &::after {
                      right: var(--toggle-offset);
                    }
                    
                    &:hover {
                      &::before {
                        background: lighten(map.get($colors, "accent"), 15%);
                      }
                    }
                  }
                }
              }
              
              // Toggle label
              span {
                @include filter_label();
                display: block;
                transition: all 0.3s ease;
                
                // Toggle track
                &::before {
                  content: "";
                  display: block;
                  position: absolute;
                  width: var(--toggle-width);
                  height: var(--toggle-height);
                  border: 0;
                  border-radius: var(--toggle-height);
                  background: map.get($colors, "lightgray");
                  right: 0;
                  top: 50%;
                  transform: translate(0, -50%);
                  transition: all 0.3s ease;
                }
                
                // Toggle knob
                &::after {
                  --toggle-offset: 2px;
                  content: "";
                  display: block;
                  position: absolute;
                  width: calc(var(--toggle-height) - (2 * var(--toggle-offset)));
                  height: calc(var(--toggle-height) - (2 * var(--toggle-offset)));
                  border-radius: var(--toggle-height);
                  background: map.get($colors, "background");
                  right: calc(
                    var(--toggle-width)
                    - var(--toggle-height) + var(--toggle-offset)
                  );
                  top: 50%;
                  transform: translate(0, -50%);
                  box-shadow: $box-shadow;
                  transition: all 0.3s ease;
                }
                
                &:hover {
                  &::before {
                    background: darken(map.get($colors, "lightgray"), 5%);
                  }
                }
              }
          }
          
          // Label
          .label {
            @include filter_label();
          }
          
          // Ion Range Slider
          .irs.irs--shiny {
            --track-color: #{map.get($colors, "lightgray")};
            --track-accent-color: #{map.get($colors, "accent")};
            
            &:hover {
              --track-color: #{darken(map.get($colors, "lightgray"), 15%)};
              --track-accent-color: #{lighten(map.get($colors, "accent"), 5%)};
            }
            
            // Knob
            .irs-handle {
              background-color: var(--track-accent-color);
              border: 0;
              box-shadow: none;
              height: 16px;
              width: 16px;
              top: 21px;
              transition: background 0.3s ease;
            }
            
            // Track (recreated in irs-grid)
            .irs-line {
              display: none;
            }
            
            // min/max indicators
            .irs-max, .irs-min {
              display: none;
            }
            
            // from/to indicators
            .irs-from, .irs-to {
              display: none;
            }
            
            // Track indicator
            .irs-bar {
              background: var(--track-accent-color);
              height: 4px;
              top: 27px;
              transition: background 0.3s ease;
            }
            
            // Selected value
            .irs-single {
              display: block;
            }
            
            // Scale box
            .irs-grid {
              height: 30px;
              transform: translate(0, -4px);
              
              // Track
              &::after {
                content: "";
                display: block;
                position: absolute;
                top: 3px;
                left: 0;
                height: 1px;
                width: 100%;
                border: 0;
                background: var(--track-color);
                transition: background 0.3s ease;
              }
              
              // Scale markers
              .irs-grid-pol {
                background-color: var(--track-color);
                transition: background-color 0.3s ease;
                
                // Minor markers
                &.small {
                  display: none;
                }
              }
            }
          }
          
          // Stepwise buttons
          button.stepwise {
            --button-size: 30px;
            width: var(--button-size);
            height: var(--button-size);
            line-height: var(--button-size);
            padding: 0;
            text-align: center;
            border-radius: $border-radius;
            border: 0;
            color: #FFFFFF;
            background: map.get($colors, "accent");
            transition: all 0.3s ease;
            
            &:hover {
              background: lighten(map.get($colors, "accent"), 10%);
            }
          }
        }
      }
    }
    
    // Dimmer pane, for visual effects
    &[data-value="Dimmer"] {
      background-color: rgba(map.get($colors, "background"), 0.3);
      backdrop-filter: saturate(180%) blur(8px);
      opacity: 0;
      content: "";
      display: block;
      position: absolute;
      width: 100vw;
      height: 100vh;
      top: 0;
      left: 0;
      z-index: -10;
      transition: 0.2s ease;
      
      &.dim {
        z-index:10;
        opacity: 1;
      }
    }
  }
}