{"version":3,"file":"shiny_app.js","mappings":"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","sources":["webpack://geom90007-a2/./src/js/user_agent.js","webpack://geom90007-a2/./src/js/events.js","webpack://geom90007-a2/./src/js/search.js","webpack://geom90007-a2/./src/js/buttons.js","webpack://geom90007-a2/./src/js/ui.js","webpack://geom90007-a2/./src/js/intro.js","webpack://geom90007-a2/./src/js/_build.js"],"sourcesContent":["/**\n  Checks the user agent and loads a helpful message\n */\nconst check_user_agent = () => {\n  // pop up message for WebQTEngine browsers (built in)\n  navigator.userAgent.includes(\"QtWebEngine\") &&\n    window.alert(\"For best effect, please use an external browser.\");\n};\n\nexport {\n  check_user_agent\n};","/**\n  Handling of reactive event messages from Shiny\n */\n\n/**\n  Opens a tabPanel while adding effects\n  @param {DOMElement} panel a DOM element representing a Shiny tabPanel\n  @param {boolean} [dimmer=true] whether to toggle dimmer panel\n  @return {boolean} True\n */\nconst activate_panel = (panel, apply_dimmer = true) => {\n  const dimmer = document.querySelector(\"[data-value='Dimmer'].tab-pane\");\n  panel && panel.classList.add(\"active\");\n  panel && apply_dimmer && dimmer.classList.add(\"dim\");\n  // Click the dimmer panel to close the panel\n  dimmer.addEventListener(\"click\", () => deactivate_panel(panel));\n  return true;\n}\n\n/**\n  Closes a tabPanel while adding effects\n  @param {DOMElement} panel a DOM element representing a Shiny tabPanel\n  @param {boolean} [dimmer=true] whether to toggle dimmer panel\n  @return {boolean} True\n */\nconst deactivate_panel = (panel, apply_dimmer = true) => {\n  const dimmer = document.querySelector(\"[data-value='Dimmer'].tab-pane\");\n  panel && panel.classList.remove(\"active\");\n  panel && apply_dimmer && dimmer.classList.remove(\"dim\");\n  // Remove all event listeners on dimmer panel\n  dimmer.replaceWith(dimmer.cloneNode(true))\n  return true;\n}\n\n/**\n  Loads and binds event handlers for Shiny custom messages\n  @return void\n */\nconst load_event_handlers = () => {\n  // Insert handlers here\n}\n\nexport {\n  activate_panel,\n  deactivate_panel,\n  load_event_handlers\n};\n","/**\n  Handle search functions\n */\n\n/**\n  Query the openstreetmaps nominatim API with the query term\n  bounded by Melbourne coordinates\n  @param {string} query The search query.\n  @return {array} An array of objects returned from the API.\n  @note Response will return empty array if non-found or error.\n  @see https://nominatim.org/release-docs/develop/api/Search/\n */\nconst search_osm = async (query) => {\n  // The URL endpoint\n  const url = new URL(\"https://nominatim.openstreetmap.org/search\");\n  \n  // Append params to the url\n  const params = {\n    \"format\": \"json\",\n    \"countrycodes\": \"au\",\n    \"viewbox\": \"144.93366,-37.79264,144.97670,-37.82391\",\n    \"bounded\": \"1\",\n    \"q\": query\n  }\n  \n  for (let param in params) {\n    url.searchParams.append(param, params[param])\n  }\n  \n  console.log(`Query URL: ${url}`)\n  on_search_go();\n  \n  const response_json = await fetch(url)\n  .then((result) => {\n    if (result.status != 200) { throw new Error(\"Bad Server Response\"); }\n    return result.json();\n  })\n  .then((json) => {\n    return json\n  })\n  .catch((error) => {\n    console.log(`Error in query: ${error}`)\n    return []\n  })\n  .finally(() => {\n    on_search_done();\n  });\n  \n  console.log(`Response JSON:`, response_json);\n  return response_json\n}\n\n/**\n  Renders the search results in the SearchResults panel\n  @param {array} json the search results as an array of objects\n  @return {void}\n */\nconst render_search_results = (json) => {\n  const res_panel = document.querySelector(\"[data-value='SearchResults'].tab-pane\");\n  \n  res_panel.innerHTML = \"\";\n  const res_elements = json.map((result) => {\n    // Wrapper\n    const wrapper = document.createElement(\"div\");\n    wrapper.classList.add(\"result-wrapper\");\n    \n    // Wrangle the display_name\n    const display_names = osm_display_name(result);\n    \n    // Bind click event to wrapper\n    wrapper.addEventListener(\"click\", (event) => {\n      const input = document.getElementById(\"search-input\");\n      \n      /** @fires set:loc */\n      input.dispatchEvent(\n        new CustomEvent(\"set:loc\", {\"detail\": result})\n      );\n      \n      /** @fires close:panel */\n      document.querySelector(\"[data-value='SearchResults'].tab-pane\")\n        .dispatchEvent(new CustomEvent(\"close:panel\", {\"detail\": result}));\n      \n      // Sets the search input box to display the selected name\n      input.value = display_names[0] || \"Unknown name\";\n      \n      // Close the panel\n      close_search_results();\n      \n      // Clean up any other indicators\n      remove_gps_indicator();\n    });\n    \n    // Create internal elements\n    const name = document.createElement(\"div\");\n    name.classList.add(\"result-name\");\n    name.innerHTML = display_names[0] || \"Unknown name\";\n    \n    const loc = document.createElement(\"div\");\n    loc.classList.add(\"result-loc\");\n    loc.innerHTML = display_names[1] && display_names.slice(1).join(\" \")\n      || \"Unknown location\";\n    \n    wrapper.appendChild(name);\n    wrapper.appendChild(loc);\n    \n    return wrapper;\n  })\n  \n  // Check that there are elements in res_elements, if not, add a message\n  if (res_elements.length < 1) {\n    search_res_alert(\"No results found, please try again.\");\n  }\n  \n  // Add elements to the res_panel\n  res_panel.append(... res_elements);\n  \n  // Open the panel after results have been rendered\n  open_search_results();\n}\n\n/**\n  Renders a contextual message inside the search results panel\n  @param {string} message the alert message\n  @param {boolean} [open_panel=false] whether or not to trigger the panel opening\n  @returns {void}\n */\nconst search_res_alert = (message, open_panel = false) => {\n  const res_panel = document.querySelector(\"[data-value='SearchResults'].tab-pane\");\n  \n  // Reset panel contents and add the message\n  res_panel.innerHTML = \"\";\n  const msg = document.createElement(\"div\");\n  msg.classList.add(\"result-none\");\n  msg.innerHTML = message;\n  res_panel.append(msg);\n  \n  // Open the panel if required\n  open_panel && open_search_results();\n}\n\n/**\n  Wrangle the display_name from Openstreetmap search results\n  @param {object} obj\n  @returns {array} of string\n */\nconst osm_display_name = (obj) => {\n  return obj.display_name && obj.display_name.split(\",\") || [];\n}\n\n/**\n  Aligns the position of the SearchResults panel and opens it\n  @returns {void}\n */\nconst open_search_results = () => {\n  const res_panel = document.querySelector(\"[data-value='SearchResults'].tab-pane\");\n  const input_wrapper = document.getElementById(\"search-input\").closest(\".wrapper\");\n  const {\n    bottom:y, width\n  } = input_wrapper.getBoundingClientRect();\n  \n  res_panel.style.top = `${y}px`;\n  res_panel.style.width = `${width}px`;\n  res_panel.classList.add(\"active\");\n}\n\n/**\n  Closes the SearchResults panel\n */\nconst close_search_results = () => {\n  const res_panel = document.querySelector(\"[data-value='SearchResults'].tab-pane\");\n  res_panel.classList.remove(\"active\");\n}\n\n/**\n  On click event handler for the search box button\n */\nconst search_panel_go = async () => {\n  // Get the search query from the search input box\n  const query = document.getElementById(\"search-input\").value;\n  \n  // Query the API\n  const results = await search_osm(query);\n  \n  // Render the search results\n  render_search_results(results);\n}\n\n/**\n  Task runner for when a search is initiated\n  @returns {void}\n  @fires search:busy\n */\nconst on_search_go = () => {\n  // Apply styling changes\n  const panel = document.querySelector(\"[data-value='Search'].tab-pane\");\n  panel && panel.classList.add(\"busy\");\n  \n  // Dispatch event\n  document.getElementById(\"search-input\").dispatchEvent(\n    new CustomEvent(\"search:busy\")\n  )\n}\n\n/**\n  Task runner for when a search has been completed\n  @returns {void}\n  @fires search:done\n */\nconst on_search_done = () => {\n  // Apply styling changes\n  const panel = document.querySelector(\"[data-value='Search'].tab-pane\");\n  panel && panel.classList.remove(\"busy\");\n  \n  // Dispatch event\n  document.getElementById(\"search-input\").dispatchEvent(\n    new CustomEvent(\"search:done\")\n  )\n}\n\n/**\n  Uses the user's geolocation as the map location\n */\nconst use_geolocation = () => {\n  const on_success = (location) => {\n    //location.coords.[latitude, longitude]\n    const {coords: {\n      latitude:lat, longitude:lon\n    }} = location;\n    const input = document.getElementById(\"search-input\");\n      \n    /** @fires set:loc */\n    input.dispatchEvent(\n      new CustomEvent(\"set:loc\", {\"detail\": {lat, lon}})\n    );\n    \n    search_res_alert(\"Current GPS location set.\", true);\n    set_gps_indicator();\n  }\n  \n  const on_failure = (reason) => {\n    //reason.message\n    search_res_alert(reason.message, true);\n  }\n  \n  // Query the navigator geolocation service\n  navigator.geolocation &&\n  navigator.geolocation.getCurrentPosition(on_success, on_failure);\n}\n\n/**\n  Adds styling to the GPS icon\n  @returns {void}\n */\nconst set_gps_indicator = () => {\n  const icon = document.getElementById(\"button-gps\");\n  icon.classList.add(\"active\");\n}\n\n/**\n  Removes styling to the GPS icon\n  @returns {void}\n */\nconst remove_gps_indicator = () => {\n  const icon = document.getElementById(\"button-gps\");\n  icon.classList.remove(\"active\");\n}\n\n/**\n  Bind tasks related to search events\n  @returns {void}\n  @listens search:busy\n  @listens search:done\n  @listens set:loc\n */\nconst bind_search_events = () => {\n  const res_panel = document.querySelector(\"[data-value='SearchResults'].tab-pane\");\n  const input = document.getElementById(\"search-input\");\n  // On search go\n  input.addEventListener(\"search:busy\", (event) => {\n    \n  })\n  \n  // On search done\n  input.addEventListener(\"search:done\", (event) => {\n    // Show ShowResults\n  })\n  \n  // On results selection\n  input.addEventListener(\"set:loc\", (event) => {\n    const {detail:data} = event\n    data && Shiny && Shiny.setInputValue(\"js_set_loc\", data);\n  })\n}\n\nexport {\n  search_osm,\n  search_panel_go,\n  on_search_go,\n  on_search_done,\n  bind_search_events,\n  open_search_results,\n  close_search_results,\n  use_geolocation\n}","/**\n  Handling of button clicks in JS\n */\nimport { activate_panel, deactivate_panel } from \"./events.js\"\nimport { search_panel_go, close_search_results, use_geolocation } from \"./search.js\";\n\n/**\n  Shows and hides the Filters panel\n  @return void\n */\nconst filters_show_hide = () => {\n  const panel = document.querySelector(\"[data-value='Filters'].tab-pane\");\n    panel.classList.contains(\"active\")\n      && deactivate_panel(panel) || activate_panel(panel)\n}\n\n/**\n  Binds actions to custom buttons\n  @return void\n */\nconst bind_button_actions = () => {\n  // Filters panel toggle\n  document.getElementById(\"filters-show-hide\").addEventListener(\n    \"click\", filters_show_hide\n  )\n  \n  // Search panel go button\n  document.getElementById(\"button-search\").addEventListener(\n    \"click\", search_panel_go\n  )\n  \n  // Search panel GPS button\n  document.getElementById(\"button-gps\").addEventListener(\n    \"click\", use_geolocation\n  )\n  \n  // Keypress events at the search input\n  document.getElementById(\"search-input\").addEventListener(\n    \"keydown\",\n    (event) => {\n      switch(event.key) {\n        case \"Enter\":\n          event.preventDefault();\n          event.stopPropagation();\n          search_panel_go();\n        break;\n        case \"Escape\":\n          event.preventDefault();\n          event.stopPropagation();\n          event.target.blur();\n          close_search_results();\n        default:\n      }\n    }\n  )\n  \n  // Global click events\n  document.addEventListener(\"click\", (event) => {\n    // Close the SearchResults panel\n    const res_panel = document.querySelector(\"[data-value='SearchResults'].tab-pane\");\n    (event.target != res_panel) && close_search_results();\n  });\n}\n\nexport {\n  bind_button_actions\n};\n","/**\n  UI related scripts\n */\n\n\n/**\n  Updates labels on the Radius slider to be more context friendly\n  @return {void}\n */\nconst slider_context_labels = () => {\n  console.log(\"Update slider context labels\");\n  const labels = document.getElementsByClassName(\"irs-grid-text\");\n  for (const label of labels) {\n    try {\n      const value = parseFloat(label.innerHTML);\n      (value < 1) && (label.innerHTML = `${parseInt(value * 1000)} m`);\n      (value >= 1) && (label.innerHTML = `${parseInt(value)} km`);\n    } catch (error) {\n      continue;\n    }\n  }\n}\n\nexport {\n  slider_context_labels\n}","/**\n  Scripts handling the behaviour for Intro page\n */\n\nconst on_intro_btn_click = (event) => {\n  console.log(event);\n  const direction = event.target.attributes.direction.nodeValue;\n  const intro_pane = document.querySelector(\"[data-value='Intro'].tab-pane\");\n  const page_limit = intro_pane.getElementsByClassName(\"page\").length;\n  \n  // Get current page number\n  let page = 1;\n  intro_pane.classList.forEach((cls) => {\n    if (cls.startsWith(\"page\")) {\n      page = parseInt(cls.split(\"-\")[1]);\n    }\n  });\n  \n  // Change the page\n  switch (direction) {\n    case \"left\":\n      if (page > 1) {\n        intro_pane.classList.remove(`page-${page}`);\n        intro_pane.classList.add(`page-${page - 1}`);\n      }\n    break;\n    case \"right\":\n      if (page < page_limit)  {\n        intro_pane.classList.remove(`page-${page}`);\n        intro_pane.classList.add(`page-${page + 1}`);\n      }\n      \n      if (page == 3) {\n        intro_pane.classList.remove(\"active\");\n      }\n    break;\n  }\n}\n\n/**\n  Binds click events to buttons\n  @returns {void}\n */\nconst bind_intro_actions = () => {\n  const btn_left = document.getElementById(\"intro-left\");\n  const btn_right = document.getElementById(\"intro-right\");\n  \n  btn_left.addEventListener(\"click\", on_intro_btn_click);\n  btn_right.addEventListener(\"click\", on_intro_btn_click);\n}\n\n/**\n  Show the intro panel on first run\n  @return {void}\n */\nconst on_first_run = () => {\n  const firstrun =\n      window.localStorage && window.localStorage.getItem('firstrun');\n    \n  if (firstrun) return;\n  \n  const intro_pane = document.querySelector(\"[data-value='Intro'].tab-pane\");\n  intro_pane.classList.add(\"active\");\n  window.localStorage && window.localStorage.setItem('firstrun', 'shown');\n}\n\nexport {\n  bind_intro_actions,\n  on_first_run\n}","/**\n  Scripts used in the Shiny app\n */\n\nimport { check_user_agent } from \"./user_agent.js\";\nimport { load_event_handlers } from \"./events.js\";\nimport { bind_button_actions } from \"./buttons\";\nimport { slider_context_labels } from \"./ui.js\";\nimport { search_osm, bind_search_events } from \"./search.js\";\nimport { bind_intro_actions, on_first_run } from \"./intro.js\";\n\n(($) => {\n  \n  load_event_handlers();\n  \n  window.onload = () => {\n    check_user_agent();\n    window.search = search_osm\n  }\n  \n  // When shiny has loaded\n  $(document).on(\"shiny:sessioninitialized\", (event) => {\n    on_first_run();\n    bind_button_actions();\n    bind_intro_actions();\n    bind_search_events();\n    slider_context_labels();\n  })\n  \n})($)"],"names":["deactivate_panel","panel","apply_dimmer","dimmer","document","querySelector","classList","remove","replaceWith","cloneNode","search_osm","query","param","url","URL","params","searchParams","append","console","log","on_search_go","fetch","then","result","status","Error","json","catch","error","finally","on_search_done","response_json","render_search_results","res_panel","innerHTML","res_elements","map","wrapper","createElement","add","display_names","osm_display_name","addEventListener","event","input","getElementById","dispatchEvent","CustomEvent","value","close_search_results","remove_gps_indicator","name","loc","slice","join","appendChild","length","search_res_alert","open_search_results","message","open_panel","msg","obj","display_name","split","closest","getBoundingClientRect","y","bottom","width","style","top","search_panel_go","results","use_geolocation","navigator","geolocation","getCurrentPosition","location","coords","lat","latitude","lon","longitude","set_gps_indicator","reason","filters_show_hide","contains","activate_panel","on_intro_btn_click","direction","target","attributes","nodeValue","intro_pane","page_limit","getElementsByClassName","page","forEach","cls","startsWith","parseInt","$","window","onload","userAgent","includes","alert","search","on","btn_left","btn_right","localStorage","getItem","setItem","key","preventDefault","stopPropagation","blur","data","detail","Shiny","setInputValue","bind_search_events","label","parseFloat","slider_context_labels"],"sourceRoot":""}