{"version":3,"file":"shiny_app.js","mappings":"6BAyBMA,EChBAC,EDgBAD,EAAmB,SAACE,GAA+B,IAAxBC,IAAwB,yDACjDC,EAASC,SAASC,cAAc,kCAKtC,OAJAJ,GAASA,EAAMK,UAAUC,OAAO,UAChCN,GAASC,GAAgBC,EAAOG,UAAUC,OAAO,OAEjDJ,EAAOK,YAAYL,EAAOM,WAAU,KAC7B,CACR,ECvBKT,EAAoB,WACxB,IAAMC,EAAQG,SAASC,cAAc,mCACnCJ,EAAMK,UAAUI,SAAS,WACpBX,EAAiBE,IDFH,SAACA,GAA+B,IAAxBC,IAAwB,yDAC/CC,EAASC,SAASC,cAAc,kCACtCJ,GAASA,EAAMK,UAAUK,IAAI,UAC7BV,GAASC,GAAgBC,EAAOG,UAAUK,IAAI,OAE9CR,EAAOS,iBAAiB,SAAS,kBAAMb,EAAiBE,EAAvB,GAElC,CCLmCY,CAAeZ,EAClD,ECLD,SAAEa,GAIAC,OAAOC,OAAS,WCPhBC,UAAUC,UAAUC,SAAS,gBAC3BJ,OAAOK,MAAM,mDDQd,EAGDN,EAAEV,UAAUiB,GAAG,4BAA4B,SAACC,GDI5ClB,SAASmB,eAAe,qBAAqBX,iBAC3C,QAASZ,ECHV,GAXH,EAaGc,E","sources":["webpack://geom90007-a2/./src/js/events.js","webpack://geom90007-a2/./src/js/buttons.js","webpack://geom90007-a2/./src/js/_build.js","webpack://geom90007-a2/./src/js/user_agent.js"],"sourcesContent":["/**\n  Handling of reactive event messages from Shiny\n */\n\n/**\n  Opens a tabPanel while adding effects\n  @param {DOMElement} panel a DOM element representing a Shiny tabPanel\n  @param {boolean} [dimmer=true] whether to toggle dimmer panel\n  @return {boolean} True\n */\nconst activate_panel = (panel, apply_dimmer = true) => {\n  const dimmer = document.querySelector(\"[data-value='Dimmer'].tab-pane\");\n  panel && panel.classList.add(\"active\");\n  panel && apply_dimmer && dimmer.classList.add(\"dim\");\n  // Click the dimmer panel to close the panel\n  dimmer.addEventListener(\"click\", () => deactivate_panel(panel));\n  return true;\n}\n\n/**\n  Closes a tabPanel while adding effects\n  @param {DOMElement} panel a DOM element representing a Shiny tabPanel\n  @param {boolean} [dimmer=true] whether to toggle dimmer panel\n  @return {boolean} True\n */\nconst deactivate_panel = (panel, apply_dimmer = true) => {\n  const dimmer = document.querySelector(\"[data-value='Dimmer'].tab-pane\");\n  panel && panel.classList.remove(\"active\");\n  panel && apply_dimmer && dimmer.classList.remove(\"dim\");\n  // Remove all event listeners on dimmer panel\n  dimmer.replaceWith(dimmer.cloneNode(true))\n  return true;\n}\n\n/**\n  Loads and binds event handlers for Shiny custom messages\n  @return void\n */\nconst load_event_handlers = () => {\n  // Insert handlers here\n}\n\nexport {\n  activate_panel,\n  deactivate_panel,\n  load_event_handlers\n};\n","/**\n  Handling of button clicks in JS\n */\nimport { activate_panel, deactivate_panel } from \"./events.js\"\n\n/**\n  Shows and hides the Filters panel\n  @return void\n */\nconst filters_show_hide = () => {\n  const panel = document.querySelector(\"[data-value='Filters'].tab-pane\");\n    panel.classList.contains(\"active\")\n      && deactivate_panel(panel) || activate_panel(panel)\n}\n\n/**\n  Binds actions to custom buttons\n  @return void\n */\nconst bind_button_actions = () => {\n  // Filters panel toggle\n  document.getElementById(\"filters-show-hide\").addEventListener(\n    \"click\", filters_show_hide\n  )\n}\n\nexport {\n  bind_button_actions\n};\n","/**\n  Scripts used in the Shiny app\n */\n\nimport { check_user_agent } from \"./user_agent.js\"\nimport { load_event_handlers } from \"./events.js\"\nimport { bind_button_actions } from \"./buttons\"\n\n(($) => {\n  \n  load_event_handlers();\n  \n  window.onload = () => {\n    check_user_agent();\n  }\n  \n  // When shiny has loaded\n  $(document).on(\"shiny:sessioninitialized\", (event) => {\n    bind_button_actions();\n  })\n  \n})($)","/**\n  Checks the user agent and loads a helpful message\n */\nconst check_user_agent = () => {\n  // pop up message for WebQTEngine browsers (built in)\n  navigator.userAgent.includes(\"QtWebEngine\") &&\n    window.alert(\"For best effect, please use an external browser.\");\n};\n\nexport {\n  check_user_agent\n};"],"names":["deactivate_panel","filters_show_hide","panel","apply_dimmer","dimmer","document","querySelector","classList","remove","replaceWith","cloneNode","contains","add","addEventListener","activate_panel","$","window","onload","navigator","userAgent","includes","alert","on","event","getElementById"],"sourceRoot":""}